setDT(newDF, keep.rownames = TRUE)
colnames(newDF)[colnames(newDF) == "rn"] <- "Genes"
setDT(df, keep.rownames = TRUE)
colnames(df)[colnames(df) == "rn"] <- "Genes"
library(data.table)
setDT(df, keep.rownames = TRUE)
colnames(df)[colnames(df) == "rn"] <- "Genes"
names(df)
rownames(df)
head(df[,1])
df[1,2]
df[1,1]
df[,1] <- gsub("(\\.).*", "",df[,1])
class(df[1,1])
df(df[1,1])
df[1,1]
df <- read.delim("data/TPM_table.txt", sep = "\t", row.names = 1)
?gsub
df <- read.delim("data/TPM_table.txt", sep = "\t", row.names = 1)
setDT(newDF, keep.rownames = TRUE)
colnames(newDF)[colnames(newDF) == "rn"] <- "Genes"
setDT(df, keep.rownames = TRUE)
colnames(df)[colnames(df) == "rn"] <- "Genes"
class(df[1,1])
df[1,1] <- hello
df[1,1] <- "hello"
df(head)
head(df)
df <- read.delim("data/TPM_table.txt", sep = "\t", row.names = 1)
setDT(df, keep.rownames = TRUE)
colnames(df)[colnames(df) == "rn"] <- "Genes"
df[,1] <- gsub("(\.).*", "",df[,1])
df[,1] <- gsub("\.(.*)", "",df[,1])
df[,1] <- gsub("\\.(.*)", "",df[,1])
df <- read.delim("data/TPM_table.txt", sep = "\t", row.names = 1)
setDT(df, keep.rownames = TRUE)
colnames(df)[colnames(df) == "rn"] <- "Genes"
df[1,1]
a <- df[1,1]
gsub("\\.(.*)", "", a[1]
)
apply(df, 1, gsub("\\.(.*)", ""))
?gsub
apply(df, 1, function(x) gsub("\\.(.*)", "", x))
gsub("[^.]+$", "", a[1])
gsub("[^.]", "", a[1])
a[1]
gsub("$+[^.], "", a[1])
gsub("$+[^.]", "", a[1])
gsub("[^.] + $", "", a[1])
gsub("[^.]+$", "", a[1])
gsub("\..(.*)", "", a[1])
gsub("\..*$", "", a[1])
gsub("\\..*$", "", a[1])
gsub("\\..*$", "", df[,1])
df [,1] <- gsub("\\..*", "", df[,1])
df <- read.delim("data/TPM_table.txt", sep = "\t", row.names = 1)
setDT(df, keep.rownames = TRUE)
colnames(df)[colnames(df) == "rn"] <- "Genes"
gsub("\\..*", "", df[,1])
column_to_change <- df[,1]
column_to_change
a <- gsub("\\..*", "", column_to_change)
a
df <- read.delim("data/TPM_table.txt", sep = "\t", row.names = 1)
setDT(df, keep.rownames = TRUE)
colnames(df)[colnames(df) == "rn"] <- "Genes"
df$Genes <- sub("T", "G", df$Genes)
control_1 <- read.delim("data/controlNew_1", sep = "\t")
control_1 <- read.delim("data/controlNew_1.txt", sep = "\t")
control_1
control_1$probe_id <- NULL
head(control_1)
control_2$probe_id <- NULL
control_3$probe_id <- NULL
control_2 <- read.delim("data/controlNew_2.txt", sep = "\t")
control_3 <- read.delim("data/controlNew_3.txt", sep = "\t")
control_1$probe_id <- NULL
control_2$probe_id <- NULL
control_3$probe_id <- NULL
colnames(control_2) <- c("ensembl_id_2", "expression_2")
colnames(control_3) <- c("ensembl_id_3", "expression_3")
colnames(control_1) <- c("ensembl_id_1", "expression_1")
colnames(control_1) <- c("Genes", "expression_1")
colnames(control_2) <- c("Genes", "expression_2")
colnames(control_3) <- c("Genes", "expression_3")
View(control_1)
merge(df, control_1, control_2, control_3, by = "Genes")
merge.data.fram(df, control_1, control_2, control_3, by = "Genes")
merge.data.frame(df, control_1, control_2, control_3, by = "Genes")
View(control_2)
View(control_3)
merge.data.frame(df, control_1, by = "Genes")
merge(df, control_1, by = "Genes")
control_2 <- read.delim("data/controlNew_2.txt", sep = "\t")
control_2$probe_id <- NULL
library(bioMart)
library(tidyr)
library(mouse4302.db) # Annotation data for affymetrix mouse array 430 2.0
#Reads in data
df <- read.delim("data/control2.txt", sep = "\t")
ortho_human_genes <- read.delim("data/mart_export.txt")
df_expression <- df
colnames(df_expression) <- c("probe_id", "expression")
colnames(ortho_human_genes) <- c("ensembl_id", "transcript_id", "human_id")
df = toTable(mouse4302ENSEMBL)
new_df <- merge(df, df_expression, by = "probe_id")
View(new_df)
write.table(new_df, "data/controlNew_2.txt", sep = "\t", row.names = F)
control_2 <- read.delim("data/controlNew_2.txt", sep = "\t")
control_2$probe_id <- NULL
colnames(control_2) <- c("Genes", "expression_2")
merge(df, control_1, by = "Genes")
colnames(df)
df <- read.delim("data/TPM_table.txt", sep = "\t", row.names = 1)
setDT(df, keep.rownames = TRUE)
colnames(df)[colnames(df) == "rn"] <- "Genes"
df$Genes <- sub("T", "G", df$Genes)
colnames(df)
merge(df, control_1, by = "Genes")
a <- df[,1]
b <- control_1[,1]
intersect(a,b)
a <- c(1,3,5,7,9)
b <- c(3,6,8,9,10)
c <- c(2,3,4,5,7,9)
intersect(intersect(a,b),c)
a <- df[,1]
b <- control_2[,1]
intersect(a,b)
b <- control_3[,1]
intersect(a,b)
a
a <- control_1[,1]
b <- control_2[,1]
?count
intersect(a,b)
df <- read.delim("data/TPM_table.txt", sep = "\t", row.names = 1)
setDT(df, keep.rownames = TRUE)
colnames(df)[colnames(df) == "rn"] <- "Genes"
df$Genes <- sub("T", "G", df$Genes)
df <- read.delim("data/TPM_table.txt", sep = "\t", row.names = 1)
setDT(df, keep.rownames = TRUE)
colnames(df)[colnames(df) == "rn"] <- "Genes"
#Reading in controls
control_1 <- read.delim("data/controlNew_1.txt", sep = "\t")
control_2 <- read.delim("data/controlNew_2.txt", sep = "\t")
control_3 <- read.delim("data/controlNew_3.txt", sep = "\t")
#Renaming columns so it is easier to remove later
control_1$probe_id <- NULL
control_2$probe_id <- NULL
control_3$probe_id <- NULL
colnames(control_1) <- c("Genes", "expression_1")
colnames(control_2) <- c("Genes", "expression_2")
colnames(control_3) <- c("Genes", "expression_3")
read.delim("data/mart_export.txt", sep = '\t')
mart <- read.delim("data/mart_export.txt", sep = '\t')
View(mart)
?match
a <- df[1,]
a
a$Genes
a$Genes %in% mart
intersect(df, mart)
intersect(mart$Transcript.stable.ID, df$Genes)
a <- df[1:5, ]
a
?mapvalues
library(plyr)
mapvalues(a, mart$Transcript.stable.ID, mart$Gene.stable.ID)
?mapvalues
a
mapvalues(a$Genes, mart$Transcript.stable.ID, mart$Gene.stable.ID)
a
mapvalues(df$Genes, mart$Transcript.stable.ID, mart$Gene.stable.ID)
df
df$Genes <- mapvalues(df$Genes, mart$Transcript.stable.ID, mart$Gene.stable.ID)
df <- read.delim("data/TPM_table.txt", sep = "\t", row.names = 1)
setDT(df, keep.rownames = TRUE)
colnames(df)[colnames(df) == "rn"] <- "Genes"
df$Genes[1:5]
mart$Transcript.stable.ID[1:5]
class(mart$Transcript.stable.ID)
class(mart$Gene.stable.ID)
mart <- lapply(mart, as.character)
class(mart$Gene.stable.ID)
class(mart$Transcript.stable.ID)
df$Genes <- mapvalues(df$Genes, mart$Transcript.stable.ID, mart$Gene.stable.ID)
df[-grep("T",df$Genes,),]
dim(df)
View(df)
df[-grep("T",df$Genes),]
df[-grep("ENSMUST",df$Genes),]
dim(df)
df <- df[-grep("ENSMUST",df$Genes),]
dim(df)
#Reading in controls
control_1 <- read.delim("data/controlNew_1.txt", sep = "\t")
control_2 <- read.delim("data/controlNew_2.txt", sep = "\t")
control_3 <- read.delim("data/controlNew_3.txt", sep = "\t")
#Renaming columns so it is easier to remove later
control_1$probe_id <- NULL
control_2$probe_id <- NULL
control_3$probe_id <- NULL
colnames(control_1) <- c("Genes", "expression_1")
colnames(control_2) <- c("Genes", "expression_2")
colnames(control_3) <- c("Genes", "expression_3")
intersect(df, control_1)
intersect(df$Genes, control_1$Genes)
merge(df, control_1, control_2, control_3, by = "Genes")
merge(df, control_1, by = "Genes")
df <- df[(df$Genes %in% control_1$Genes) && (df$Genes %in% control_2$Genes) && df$Genes %in% control_3$Genes]
dim(df)
# Reading data and cleaning
df <- read.delim("data/TPM_table.txt", sep = "\t", row.names = 1)
setDT(df, keep.rownames = TRUE)
colnames(df)[colnames(df) == "rn"] <- "Genes"
# Change transcripts into genes for original data
mart <- read.delim("data/mart_export.txt", sep = '\t')
mart <- lapply(mart, as.character)
df$Genes <- mapvalues(df$Genes, mart$Transcript.stable.ID, mart$Gene.stable.ID)
# Deleting rows that are still transcripts (i.e. they are not orthologous to human genes)
df <- df[-grep("ENSMUST",df$Genes),]
df <- df[df$Genes %in% control_1$Genes]
dim(df)
merge(df, control_1, by = "Genes")
duplicated(df$Genes)
df <- read.delim("data/TPM_table.txt", sep = "\t", row.names = 1)
setDT(df, keep.rownames = TRUE)
colnames(df)[colnames(df) == "rn"] <- "Genes"
dim(df)
mart <- read.delim("data/mart_export.txt", sep = '\t')
mart <- lapply(mart, as.character)
df$Genes <- mapvalues(df$Genes, mart$Transcript.stable.ID, mart$Gene.stable.ID)
# Deleting rows that are still transcripts (i.e. they are not orthologous to human genes)
df <- df[-grep("ENSMUST",df$Genes),]
dim9df)
dim(df)
source('~/Documents/HYRS/mouse_project/data_wrangling.R')
df <- read.delim("data/TPM_table.txt", sep = "\t", row.names = 1)
setDT(df, keep.rownames = TRUE)
colnames(df)[colnames(df) == "rn"] <- "Genes"
mart <- read.delim("data/mart_export.txt", sep = '\t')
mart <- lapply(mart, as.character)
df$Genes <- mapvalues(df$Genes, mart$Transcript.stable.ID, mart$Gene.stable.ID)
df <- read.delim("data/TPM_table.txt", sep = "\t", row.names = 1)
setDT(df, keep.rownames = TRUE)
colnames(df)[colnames(df) == "rn"] <- "Genes"
df <- df[-grep("ENSMUST",df$Genes),]
View(df)
df <- read.delim("data/TPM_table.txt", sep = "\t", row.names = 1)
setDT(df, keep.rownames = TRUE)
colnames(df)[colnames(df) == "rn"] <- "Genes"
# Change transcripts into genes for original data
mart <- read.delim("data/mart_export.txt", sep = '\t')
mart <- lapply(mart, as.character)
df$Genes <- mapvalues(df$Genes, mart$Transcript.stable.ID, mart$Gene.stable.ID)
# Deleting rows that are still transcripts (i.e. they are not orthologous to human genes)
df <- df[-grep("ENSMUST",df$Genes),]
df
View(df)
test_df <- df[Genes$Freq > 1,]
dim(df[duplicated(df$Genes),])[1]
?aggregate
df_new <- data.table(df)
df_new <- df_new[,list(G3M19LEG = mean(G3M19LEG), G3M5CM = mean(G3M5CM), G3M5LEG = mean(G3M5LEG),
RMS1 = mean(RMS1), RMS3 = mean(RMS3), RMS_3 = mean(RMS_3), T_LEFT = mean(T_LEFT),
T_LEG = mean(T_LEG)), list(Genes)]
View(df_new)
?duplicated
df_new <- as.data.frame(df_new)
df_new <- data.table(df)
df_new <- df_new[,list(G3M19LEG = mean(G3M19LEG), G3M5CM = mean(G3M5CM), G3M5LEG = mean(G3M5LEG),
RMS1 = mean(RMS1), RMS3 = mean(RMS3), RMS_3 = mean(RMS_3), T_LEFT = mean(T_LEFT),
T_LEG = mean(T_LEG)), list(Genes)]
dim(df_new[duplicated(df_new$Genes),])[1]
df_new <- as.data.frame(df_new)
#Reading in controls
control_1 <- read.delim("data/controlNew_1.txt", sep = "\t")
control_2 <- read.delim("data/controlNew_2.txt", sep = "\t")
control_3 <- read.delim("data/controlNew_3.txt", sep = "\t")
#Renaming columns so it is easier to remove later
control_1$probe_id <- NULL
control_2$probe_id <- NULL
control_3$probe_id <- NULL
colnames(control_1) <- c("Genes", "expression_1")
colnames(control_2) <- c("Genes", "expression_2")
colnames(control_3) <- c("Genes", "expression_3")
# Combining controls
df <- df[df$Genes %in% control_1$Genes]
merge(df, control_1, by = "Genes")
dim(control_1)
dim(df_new)
df <- as.data.frame(df_new)
df <- df[df$Genes %in% control_1$Genes]
df$Genes
df <- df[df$Genes %in% control_1$Genes]
df_new <- data.table(df)
df_new <- df_new[,list(G3M19LEG = mean(G3M19LEG), G3M5CM = mean(G3M5CM), G3M5LEG = mean(G3M5LEG),
RMS1 = mean(RMS1), RMS3 = mean(RMS3), RMS_3 = mean(RMS_3), T_LEFT = mean(T_LEFT),
T_LEG = mean(T_LEG)), list(Genes)]
df <- df_new
df <- df[df$Genes %in% control_1$Genes]
merge(df, control_1, by = "Genes")
df <- df_new
dim(df)
df <- df[df$Genes %in% control_1$Genes]
dim9df
dim(df)
dim(control_1[duplicated(control_1$Genes),])[1]
dim(control_2[duplicated(control_2$Genes),])[1]
dim(control_3[duplicated(control_3$Genes),])[1]
df_new <- data.table(control_1)
df_new <- df_new[,list(expression_1= mean(expression_1)), list(Genes)]
df <- df_new
df_new <- data.table(control_2)
df_new <- df_new[,list(expression_2= mean(expression_2)), list(Genes)]
df <- df_new
df_new <- data.table(control_3)
df_new <- df_new[,list(expression_3= mean(expression_3)), list(Genes)]
df <- df_new
dim(control_3[duplicated(control_3$Genes),])[1]
df <- read.delim("data/TPM_table.txt", sep = "\t", row.names = 1)
setDT(df, keep.rownames = TRUE)
colnames(df)[colnames(df) == "rn"] <- "Genes"
# Change transcripts into genes for original data
mart <- read.delim("data/mart_export.txt", sep = '\t')
mart <- lapply(mart, as.character)
df$Genes <- mapvalues(df$Genes, mart$Transcript.stable.ID, mart$Gene.stable.ID)
# Deleting rows that are still transcripts (i.e. they are not orthologous to human genes)
df <- df[-grep("ENSMUST",df$Genes),]
#Averaging out values of duplicate rows
df_new <- data.table(df)
df_new <- df_new[,list(G3M19LEG = mean(G3M19LEG), G3M5CM = mean(G3M5CM), G3M5LEG = mean(G3M5LEG),
RMS1 = mean(RMS1), RMS3 = mean(RMS3), RMS_3 = mean(RMS_3), T_LEFT = mean(T_LEFT),
T_LEG = mean(T_LEG)), list(Genes)]
df <- df_new
#Reading in controls
control_1 <- read.delim("data/controlNew_1.txt", sep = "\t")
control_2 <- read.delim("data/controlNew_2.txt", sep = "\t")
control_3 <- read.delim("data/controlNew_3.txt", sep = "\t")
#Renaming columns so it is easier to remove later
control_1$probe_id <- NULL
control_2$probe_id <- NULL
control_3$probe_id <- NULL
colnames(control_1) <- c("Genes", "expression_1")
colnames(control_2) <- c("Genes", "expression_2")
colnames(control_3) <- c("Genes", "expression_3")
# Averaging out duplicates
df_new <- data.table(control_1)
df_new <- df_new[,list(expression_1= mean(expression_1)), list(Genes)]
control_1<- df_new
df_new <- data.table(control_2)
df_new <- df_new[,list(expression_2= mean(expression_2)), list(Genes)]
control_2 <- df_new
df_new <- data.table(control_3)
df_new <- df_new[,list(expression_3= mean(expression_3)), list(Genes)]
control_2<- df_new
df_new <- data.table(control_2)
df_new <- df_new[,list(expression_2= mean(expression_2)), list(Genes)]
control_2 <- df_new
df_new <- data.table(control_3)
df_new <- df_new[,list(expression_3= mean(expression_3)), list(Genes)]
control_3<- df_new
df <- df[df$Genes %in% control_1$Genes]
merge(df, control_1, by = "Genes")
merge(df, control_1, control_2, control_3 by = "Genes")
merge(df, control_1, control_2, control_3, by = "Genes")
merge(df, control_1, by = "Genes")
merge(df, control_2, by = "Genes")
merge(df, control_3, by = "Genes")
df <- df[df$Genes %in% control_1$Genes]
df <- merge(df, control_1, by = "Genes")
df <- merge(df, control_2, by = "Genes")
df <- merge(df, control_3, by = "Genes")
control_1 <- read.delim("data/controlNew_1.txt", sep = "\t")
control_2 <- read.delim("data/controlNew_2.txt", sep = "\t")
control_3 <- read.delim("data/controlNew_3.txt", sep = "\t")
#Renaming columns so it is easier to remove later
control_1$probe_id <- NULL
control_2$probe_id <- NULL
control_3$probe_id <- NULL
colnames(control_1) <- c("Genes", "expression_1")
colnames(control_2) <- c("Genes", "expression_2")
colnames(control_3) <- c("Genes", "expression_3")
# Averaging out duplicates
df_new <- data.table(control_1)
df_new <- df_new[,list(expression_1= mean(expression_1)), list(Genes)]
control_1<- df_new
df_new <- data.table(control_2)
df_new <- df_new[,list(expression_2= mean(expression_2)), list(Genes)]
control_2 <- df_new
df_new <- data.table(control_3)
df_new <- df_new[,list(expression_3= mean(expression_3)), list(Genes)]
control_3<- df_new
df <- df[df$Genes %in% control_1$Genes]
df <- merge(df, control_1, by = "Genes")
df <- merge(df, control_2, by = "Genes")
df <- merge(df, control_3, by = "Genes")
df <- read.delim("data/TPM_table.txt", sep = "\t", row.names = 1)
setDT(df, keep.rownames = TRUE)
colnames(df)[colnames(df) == "rn"] <- "Genes"
# Change transcripts into genes for original data
mart <- read.delim("data/mart_export.txt", sep = '\t')
mart <- lapply(mart, as.character)
df$Genes <- mapvalues(df$Genes, mart$Transcript.stable.ID, mart$Gene.stable.ID)
# Deleting rows that are still transcripts (i.e. they are not orthologous to human genes)
df <- df[-grep("ENSMUST",df$Genes),]
#Averaging out values of duplicate rows
df_new <- data.table(df)
df_new <- df_new[,list(G3M19LEG = mean(G3M19LEG), G3M5CM = mean(G3M5CM), G3M5LEG = mean(G3M5LEG),
RMS1 = mean(RMS1), RMS3 = mean(RMS3), RMS_3 = mean(RMS_3), T_LEFT = mean(T_LEFT),
T_LEG = mean(T_LEG)), list(Genes)]
df <- df_new
control_1 <- read.delim("data/controlNew_1.txt", sep = "\t")
control_2 <- read.delim("data/controlNew_2.txt", sep = "\t")
control_3 <- read.delim("data/controlNew_3.txt", sep = "\t")
#Renaming columns so it is easier to remove later
control_1$probe_id <- NULL
control_2$probe_id <- NULL
control_3$probe_id <- NULL
colnames(control_1) <- c("Genes", "expression_1")
colnames(control_2) <- c("Genes", "expression_2")
colnames(control_3) <- c("Genes", "expression_3")
# Averaging out duplicates
df_new <- data.table(control_1)
df_new <- df_new[,list(expression_1= mean(expression_1)), list(Genes)]
control_1<- df_new
df_new <- data.table(control_2)
df_new <- df_new[,list(expression_2= mean(expression_2)), list(Genes)]
control_2 <- df_new
df_new <- data.table(control_3)
df_new <- df_new[,list(expression_3= mean(expression_3)), list(Genes)]
control_3<- df_new
# Combining controls
df <- df[df$Genes %in% control_1$Genes]
df <- merge(df, control_1, by = "Genes")
df <- merge(df, control_2, by = "Genes")
df <- merge(df, control_3, by = "Genes")
row_sub = apply (df[, 1:8], 1, function(row) all(row != 0))
newDF <- df[row_sub,]
# Removing low variance features (i.e. all values are between 0.5 standard deviations)
row_sub = apply(newDF, 1, function(row) all(var(row) > 0.5))
newDF <- newDF[row_sub,]
# Putting row names in column and writing dataset
write.table(newDF, "model_data.txt", sep = "\t")
View(newDF)
View(df)
row_sub = apply (df[, 1:8], 1, function(row) all(row != 0))
newDF <- df[row_sub,]
row_sub = apply(newDF, 1, function(row) all(var(row) > 0.5))
newDF <- newDF[row_sub,]
newDF <- df[row_sub,]
dim(newDF)
dim9df
dim(df)
row_sub = apply (df[, 1:8], 1, function(row) all(row != 0))
newDF <- df[row_sub,]
row_sub = apply(newDF, 1, function(row) all(var(row) > 0.5))
newDF <- newDF[row_sub,]
dim(newDF)
row_sub = apply (df[, 1:8], 1, function(row) all(row != 0))
newDF <- df[row_sub,]
dim(newDF)
row_sub = apply(newDF, 1, function(row) all(var(row) > 0.25))
newDF <- newDF[row_sub,]
dim(newDF)
row_sub = apply (df[, 1:8], 1, function(row) all(row != 0))
newDF <- df[row_sub,]
row_sub = apply(newDF, 1, function(row) all(var(row) > 0.5))
row_sub
newDF <- df[row_sub,]
# Removing low variance features (i.e. all values are between 0.5 standard deviations)
row_sub = apply(newDF, 1, function(row) all(var(row) > 0.5))
newDF <- newDF[row_sub,]
row_sub
row_sub = apply(newDF, 1, function(row) all(var(row) > 0))
row_sub
df <- df[df$Genes %in% control_1$Genes]
df <- merge(df, control_1, by = "Genes")
df <- merge(df, control_2, by = "Genes")
df <- merge(df, control_3, by = "Genes")
row_sub = apply (df[, 1:8], 1, function(row) all(row != 0))
row_sub
newDF <- df[row_sub,]
dim(newDF)
var(newDF(1,))
var(newDF[1,])
head(newDF)
head(df[,1:8])
head(df[,2:12])
row_sub = apply (df[, 2:12], 1, function(row) all(row != 0))
newDF <- df[row_sub,]
row_sub = apply(newDF, 1, function(row) all(var(row) > 0))
warnings(0)
warnings()
newDF[1,]
row_sub
row_sub = apply (df[, 2:12], 1, function(row) all(row != 0))
newDF <- newDF[-Genes]
newDF$Genes <- NULL
row_sub = apply (df[, 2:12], 1, function(row) all(row != 0))
newDF <- df[row_sub,]
geneList <- newDF$Genes
newDF$Genes <- NULL
row_sub = apply(newDF, 1, function(row) all(var(row) > 0))
newDF <- newDF[row_sub,]
row_sub = apply (df[, 2:12], 1, function(row) all(row != 0))
newDF <- df[row_sub,]
row_sub = apply(newDF, 1, function(row) all(var(row[2:12]) > 0))
newDF <- newDF[row_sub,]
write.table(newDF, "model_data.txt", sep = "\t")
