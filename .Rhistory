# Averaging out duplicates
df_new <- data.table(control_1)
df_new <- df_new[,list(expression_1= mean(expression_1)), list(Genes)]
control_1<- df_new
df_new <- data.table(control_2)
df_new <- df_new[,list(expression_2= mean(expression_2)), list(Genes)]
control_2 <- df_new
df_new <- data.table(control_3)
df_new <- df_new[,list(expression_3= mean(expression_3)), list(Genes)]
control_2<- df_new
df_new <- data.table(control_2)
df_new <- df_new[,list(expression_2= mean(expression_2)), list(Genes)]
control_2 <- df_new
df_new <- data.table(control_3)
df_new <- df_new[,list(expression_3= mean(expression_3)), list(Genes)]
control_3<- df_new
df <- df[df$Genes %in% control_1$Genes]
merge(df, control_1, by = "Genes")
merge(df, control_1, control_2, control_3 by = "Genes")
merge(df, control_1, control_2, control_3, by = "Genes")
merge(df, control_1, by = "Genes")
merge(df, control_2, by = "Genes")
merge(df, control_3, by = "Genes")
df <- df[df$Genes %in% control_1$Genes]
df <- merge(df, control_1, by = "Genes")
df <- merge(df, control_2, by = "Genes")
df <- merge(df, control_3, by = "Genes")
control_1 <- read.delim("data/controlNew_1.txt", sep = "\t")
control_2 <- read.delim("data/controlNew_2.txt", sep = "\t")
control_3 <- read.delim("data/controlNew_3.txt", sep = "\t")
#Renaming columns so it is easier to remove later
control_1$probe_id <- NULL
control_2$probe_id <- NULL
control_3$probe_id <- NULL
colnames(control_1) <- c("Genes", "expression_1")
colnames(control_2) <- c("Genes", "expression_2")
colnames(control_3) <- c("Genes", "expression_3")
# Averaging out duplicates
df_new <- data.table(control_1)
df_new <- df_new[,list(expression_1= mean(expression_1)), list(Genes)]
control_1<- df_new
df_new <- data.table(control_2)
df_new <- df_new[,list(expression_2= mean(expression_2)), list(Genes)]
control_2 <- df_new
df_new <- data.table(control_3)
df_new <- df_new[,list(expression_3= mean(expression_3)), list(Genes)]
control_3<- df_new
df <- df[df$Genes %in% control_1$Genes]
df <- merge(df, control_1, by = "Genes")
df <- merge(df, control_2, by = "Genes")
df <- merge(df, control_3, by = "Genes")
df <- read.delim("data/TPM_table.txt", sep = "\t", row.names = 1)
setDT(df, keep.rownames = TRUE)
colnames(df)[colnames(df) == "rn"] <- "Genes"
# Change transcripts into genes for original data
mart <- read.delim("data/mart_export.txt", sep = '\t')
mart <- lapply(mart, as.character)
df$Genes <- mapvalues(df$Genes, mart$Transcript.stable.ID, mart$Gene.stable.ID)
# Deleting rows that are still transcripts (i.e. they are not orthologous to human genes)
df <- df[-grep("ENSMUST",df$Genes),]
#Averaging out values of duplicate rows
df_new <- data.table(df)
df_new <- df_new[,list(G3M19LEG = mean(G3M19LEG), G3M5CM = mean(G3M5CM), G3M5LEG = mean(G3M5LEG),
RMS1 = mean(RMS1), RMS3 = mean(RMS3), RMS_3 = mean(RMS_3), T_LEFT = mean(T_LEFT),
T_LEG = mean(T_LEG)), list(Genes)]
df <- df_new
control_1 <- read.delim("data/controlNew_1.txt", sep = "\t")
control_2 <- read.delim("data/controlNew_2.txt", sep = "\t")
control_3 <- read.delim("data/controlNew_3.txt", sep = "\t")
#Renaming columns so it is easier to remove later
control_1$probe_id <- NULL
control_2$probe_id <- NULL
control_3$probe_id <- NULL
colnames(control_1) <- c("Genes", "expression_1")
colnames(control_2) <- c("Genes", "expression_2")
colnames(control_3) <- c("Genes", "expression_3")
# Averaging out duplicates
df_new <- data.table(control_1)
df_new <- df_new[,list(expression_1= mean(expression_1)), list(Genes)]
control_1<- df_new
df_new <- data.table(control_2)
df_new <- df_new[,list(expression_2= mean(expression_2)), list(Genes)]
control_2 <- df_new
df_new <- data.table(control_3)
df_new <- df_new[,list(expression_3= mean(expression_3)), list(Genes)]
control_3<- df_new
# Combining controls
df <- df[df$Genes %in% control_1$Genes]
df <- merge(df, control_1, by = "Genes")
df <- merge(df, control_2, by = "Genes")
df <- merge(df, control_3, by = "Genes")
row_sub = apply (df[, 1:8], 1, function(row) all(row != 0))
newDF <- df[row_sub,]
# Removing low variance features (i.e. all values are between 0.5 standard deviations)
row_sub = apply(newDF, 1, function(row) all(var(row) > 0.5))
newDF <- newDF[row_sub,]
# Putting row names in column and writing dataset
write.table(newDF, "model_data.txt", sep = "\t")
View(newDF)
View(df)
row_sub = apply (df[, 1:8], 1, function(row) all(row != 0))
newDF <- df[row_sub,]
row_sub = apply(newDF, 1, function(row) all(var(row) > 0.5))
newDF <- newDF[row_sub,]
newDF <- df[row_sub,]
dim(newDF)
dim9df
dim(df)
row_sub = apply (df[, 1:8], 1, function(row) all(row != 0))
newDF <- df[row_sub,]
row_sub = apply(newDF, 1, function(row) all(var(row) > 0.5))
newDF <- newDF[row_sub,]
dim(newDF)
row_sub = apply (df[, 1:8], 1, function(row) all(row != 0))
newDF <- df[row_sub,]
dim(newDF)
row_sub = apply(newDF, 1, function(row) all(var(row) > 0.25))
newDF <- newDF[row_sub,]
dim(newDF)
row_sub = apply (df[, 1:8], 1, function(row) all(row != 0))
newDF <- df[row_sub,]
row_sub = apply(newDF, 1, function(row) all(var(row) > 0.5))
row_sub
newDF <- df[row_sub,]
# Removing low variance features (i.e. all values are between 0.5 standard deviations)
row_sub = apply(newDF, 1, function(row) all(var(row) > 0.5))
newDF <- newDF[row_sub,]
row_sub
row_sub = apply(newDF, 1, function(row) all(var(row) > 0))
row_sub
df <- df[df$Genes %in% control_1$Genes]
df <- merge(df, control_1, by = "Genes")
df <- merge(df, control_2, by = "Genes")
df <- merge(df, control_3, by = "Genes")
row_sub = apply (df[, 1:8], 1, function(row) all(row != 0))
row_sub
newDF <- df[row_sub,]
dim(newDF)
var(newDF(1,))
var(newDF[1,])
head(newDF)
head(df[,1:8])
head(df[,2:12])
row_sub = apply (df[, 2:12], 1, function(row) all(row != 0))
newDF <- df[row_sub,]
row_sub = apply(newDF, 1, function(row) all(var(row) > 0))
warnings(0)
warnings()
newDF[1,]
row_sub
row_sub = apply (df[, 2:12], 1, function(row) all(row != 0))
newDF <- newDF[-Genes]
newDF$Genes <- NULL
row_sub = apply (df[, 2:12], 1, function(row) all(row != 0))
newDF <- df[row_sub,]
geneList <- newDF$Genes
newDF$Genes <- NULL
row_sub = apply(newDF, 1, function(row) all(var(row) > 0))
newDF <- newDF[row_sub,]
row_sub = apply (df[, 2:12], 1, function(row) all(row != 0))
newDF <- df[row_sub,]
row_sub = apply(newDF, 1, function(row) all(var(row[2:12]) > 0))
newDF <- newDF[row_sub,]
write.table(newDF, "model_data.txt", sep = "\t")
df <- read.delim("data/TPM_table.txt", sep = "\t", row.names = 1)
df[2,]
model_df <- read.delim("data/model_data.txt", sep = "\t")
test_df <- read.delim("data/test_data.txt", sep = "\t")
View(model_Df)
View(model_df)
View(test_df)
a <- model_df[2,3]
a
class9a
class(a)
levels(a)
class(model_data[2,])
class(model_df[2,])
model_df[2,]
class(model_df[,2])
colnames(model_df) <- model_df[2,]
model_df <- read.delim("data/model_data.txt", sep = "\t")
rename(model_df, "X.1.2" = model_df[2,1])
library(tidyr)
(plyr)
library(plyr)
rename(model_df, "X.1.2" = model_df[2,1])
column.names
?column.names
??column.names
levels(model_df[,2])
class(model_df[,2])
?unfactor.data.frame
i <- sapply(df, is.factor)
i
i <- sapply(model_df, is.factor)
i
model_df[i] <- lapply(model_df[i], as.character)
model_df
levels(model_df[,2])
levels(model_df[,5])
class(model_df[4,5])
write.table(model_df, "test.txt", sep = "\t")
model_df <- read.delim("data/model_data.txt", sep = "\t")
test_df <- read.delim("data/test_data.txt", sep = "\t")
model_df <- read.delim("data/model_data.txt", sep = "\t")
i <- sapply(model_df, is.factor)
model_df[i] <- lapply(model_df[i], as.character)
model_df[2,]
colnames(model_df) <- model_df[2,]
model_df <- model_df[-c(1,2),]
model_df[-c(1)]
model_df[-c(1,2)] <- lapply(model_df[-c(1,2)], as.numeric)
i <- sapply(model_df, is.factor)
model_df[i] <- lapply(model_df[i], as.character)
i <- sapply(test-df, is.factor)
test_df[i] <- lapply(test_df[i], as.character)
colnames(model_df) <- model_df[2,]
model_df <- model_df[-c(1,2),]
colnames(test_df) <- test_df[2,]
test_df <- test_df[-c(1,2),]
model_df[-c(1,2)] <- lapply(model_df[-c(1,2)], as.numeric)
test_df[-c(1,2)] <- lapply(test-df[-c(1,2)], as.numeric)
i <- sapply(model_df, is.factor)
model_df[i] <- lapply(model_df[i], as.character)
i <- sapply(test-df, is.factor)
test_df[i] <- lapply(test_df[i], as.character)
colnames(model_df) <- model_df[2,]
model_df <- model_df[-c(1,2),]
colnames(test_df) <- test_df[2,]
test_df <- test_df[-c(1,2),]
model_df[-c(1,2)] <- lapply(model_df[-c(1,2)], as.numeric)
test_df[-c(1,2)] <- lapply(test-df[-c(1,2)], as.numeric)
i <- sapply(model_df, is.factor)
model_df[i] <- lapply(model_df[i], as.character)
i <- sapply(test-df, is.factor)
test_df[i] <- lapply(test_df[i], as.character)
colnames(model_df) <- model_df[2,]
model_df <- model_df[-c(1,2),]
colnames(test_df) <- test_df[2,]
test_df <- test_df[-c(1,2),]
model_df[-c(1,2)] <- lapply(model_df[-c(1,2)], as.numeric)
test_df[-c(1,2)] <- lapply(test-df[-c(1,2)], as.numeric)
i <- sapply(test_df, is.factor)
test_df[i] <- lapply(test_df[i], as.character)
colnames(test_df) <- test_df[2,]
test_df <- test_df[-c(1,2),]
test_df[-c(1,2)] <- lapply(test_df[-c(1,2)], as.numeric)
test_df <- test_df[-c(1,2),]
test_df <- read.delim("data/test_data.txt", sep = "\t")
model_df <- read.delim("data/model_data.txt", sep = "\t")
test_df <- read.delim("data/test_data.txt", sep = "\t")
i <- sapply(model_df, is.factor)
model_df[i] <- lapply(model_df[i], as.character)
i <- sapply(test_df, is.factor)
test_df[i] <- lapply(test_df[i], as.character)
colnames(model_df) <- model_df[2,]
model_df <- model_df[-c(1,2),]
colnames(test_df) <- test_df[2,]
test_df <- test_df[-c(1,2),]
model_df[-c(1,2)] <- lapply(model_df[-c(1,2)], as.numeric)
test_df[-c(1,2)] <- lapply(test_df[-c(1,2)], as.numeric)
all_df <- merge(model_df, test_df, by = "Name")
View(all_df)
test_df <- test_df[,-c(2)]
all_df <- merge(model_df, test_df, by = "Name")
write.table(all_df, "data/uncleaned-human-data.txt", sep = '\t')
source("https://bioconductor.org/biocLite.R")
biocLite("hgu133a.db")
library(bioMart)
library(hgu133a.db)
copy_df <- all_df
all_df = toTable(hgu133aENSEMBL)
View(copy_df)
all_df <- merge(model_df, test_df, by = "Name")
ensemblKey = toTable(hgu133aENSEMBL)
all_df <- apply(all_df, 1, gsub('.*:',""))
?gsub
all_df <- gsub('.*:',"", all_df$Name)
head(all_df$Name)
all_df <- gsub('.*:',"", all_df[,1])
all_df[,1]
class(all_df$Name)
class(all_df)
all_df <- merge(model_df, test_df, by = "Name")
all_df[,1] <- gsub('.*:',"", all_df[,1])
head(ensemblKey)
colname(all_df[,1]) <- "probe_id"
colnames(all_df[,1]) <- "probe_id"
colnames(all_df)[1] <- "probe_id"
merge(all_df, ensemblKey, by = "probe_id")
all_df <- merge(all_df, ensemblKey, by = "probe_id")
all_df$probe_id <- all_df$ensembl_id
all_df$probe_id <- all_df$ensembl_id
all_df$ensembl_id <- NULL
colnames(all_df)[1] <- "Genes"
sum(duplicated(all_df$Genes) == TRUE)
colnames(all_df)
df_new <- df_new[,list(ARS_3 = mean(ARS_3), ARS_4 = mean(ARS_4), ERS_1 = mean(ERS_1),
ERS_2 = mean(ERS_2), CBS_1 = mean(CBS_1), CBS_2 = mean(CBS_2),
ES_1 = mean(ES_1), ES_2 = mean(ES_2), ES_3 = mean(ES_3), FMT_1 = mean(FMT_1),
FMT_2 = mean(FMT_2), MSS_1 = mean(MSS_1), MSS_2 = mean(MSS_2), MSS_3 = mean(MSS_3),
MSS_4 = mean(MSS_4), LMS_1 = mean(LMS_1), LMS_2 = mean(LMS_2), LMS_3 = mean(LMS_3),
LMS_4 = mean(LMS_4), MLS_1 = mean(MLS_1), MLS_2 = mean(MLS_2), MLS_3 = mean(MLS_3),
MLS_4 = mean(MLS_4), OS_1 = mean(OS_1), OS_2 = mean(OS_2), OS_3 = mean(OS_3),
OS_4 = mean(OS_4), OS_5 = mean(OS_5), OS_6 = mean(OS_6), ARS_1 = mean(ARS_1),
ERS_3 = mean(ERS_3), CBS_3 = mean(CBS_3), CBS_4 = mean(CBS_4), ES_4 = mean(ES_4),
ES_5 = mean(ES_5), FMT_3 = mean(FMT_3), FMT_4 = mean(FMT_4), MSS_5 = mean(MSS_5),
MSS_6 = mean(MSS_6), MSS_7 = mean(MSS_7), MSS_8 = mean(MSS_8), LMS_5 = mean(LMS_5),
LMS_6 = mean(LMS_6), LMS_7 = mean(LMS_8), MLS_5 = mean(MLS_5), MLS_6 = mean(MLS_6),
MLS_7 = mean(MLS_7), OS_7 = mean(OS_7), OS_8 = mean(OS_8), OS_9 = mean(OS_9),
OS_10 = mean(OS_10), OS_11 = mean(OS_11)), list(Genes)]
df_new <- data.table(all_df)
library(data.table)
df_new <- data.table(all_df)
df_new <- df_new[,list(ARS_3 = mean(ARS_3), ARS_4 = mean(ARS_4), ERS_1 = mean(ERS_1),
ERS_2 = mean(ERS_2), CBS_1 = mean(CBS_1), CBS_2 = mean(CBS_2),
ES_1 = mean(ES_1), ES_2 = mean(ES_2), ES_3 = mean(ES_3), FMT_1 = mean(FMT_1),
FMT_2 = mean(FMT_2), MSS_1 = mean(MSS_1), MSS_2 = mean(MSS_2), MSS_3 = mean(MSS_3),
MSS_4 = mean(MSS_4), LMS_1 = mean(LMS_1), LMS_2 = mean(LMS_2), LMS_3 = mean(LMS_3),
LMS_4 = mean(LMS_4), MLS_1 = mean(MLS_1), MLS_2 = mean(MLS_2), MLS_3 = mean(MLS_3),
MLS_4 = mean(MLS_4), OS_1 = mean(OS_1), OS_2 = mean(OS_2), OS_3 = mean(OS_3),
OS_4 = mean(OS_4), OS_5 = mean(OS_5), OS_6 = mean(OS_6), ARS_1 = mean(ARS_1),
ERS_3 = mean(ERS_3), CBS_3 = mean(CBS_3), CBS_4 = mean(CBS_4), ES_4 = mean(ES_4),
ES_5 = mean(ES_5), FMT_3 = mean(FMT_3), FMT_4 = mean(FMT_4), MSS_5 = mean(MSS_5),
MSS_6 = mean(MSS_6), MSS_7 = mean(MSS_7), MSS_8 = mean(MSS_8), LMS_5 = mean(LMS_5),
LMS_6 = mean(LMS_6), LMS_7 = mean(LMS_8), MLS_5 = mean(MLS_5), MLS_6 = mean(MLS_6),
MLS_7 = mean(MLS_7), OS_7 = mean(OS_7), OS_8 = mean(OS_8), OS_9 = mean(OS_9),
OS_10 = mean(OS_10), OS_11 = mean(OS_11)), list(Genes)]
sum(duplicated(all_df$Genes) == TRUE)
all_df <- df_new
sum(duplicated(all_df$Genes) == TRUE)
write.table(df, "human_gene_data.txt", sep = "\t")
h_df <- read.delim("data/human_gene_data.txt", sep = "\t")
clear()
rm(list=ls())
h_df <- read.delim("data/human_gene_data.txt", sep = "\t")
m_df <- read.delim("data/mouse_gene_data.txt", sep = "\t")
dim(h_df)
dim(m_df)
?in
View(h_df)
?read.delim
h_df <- read.delim("data/human_gene_data.txt", row.names = NULL,  sep = "\t")
m_df <- read.delim("data/mouse_gene_data.txt", row.names = NULL, sep = "\t")
colnames(h_df)[1] <- "Genes"
colnames(m_df)[1] <- "Genes"
h_df <- h_df[h_df$Genes %in% m_df$Genes, ]
View(h_df)
h_df <- read.delim("data/human_gene_data.txt", row.names = NULL,  sep = "\t")
View(m_df)
m_df <- read.delim("data/mouse_gene_data.txt", sep = "\t")
colnames(h_df)[1] <- "Genes"
#Reading human gene data
model_df <- read.delim("data/model_data.txt", sep = "\t")
test_df <- read.delim("data/test_data.txt", sep = "\t")
i <- sapply(model_df, is.factor)
model_df[i] <- lapply(model_df[i], as.character)
i <- sapply(test_df, is.factor)
test_df[i] <- lapply(test_df[i], as.character)
colnames(model_df) <- model_df[2,]
model_df <- model_df[-c(1,2),]
colnames(test_df) <- test_df[2,]
test_df <- test_df[-c(1,2),]
model_df[-c(1,2)] <- lapply(model_df[-c(1,2)], as.numeric)
test_df[-c(1,2)] <- lapply(test_df[-c(1,2)], as.numeric)
test_df <- test_df[,-c(2)]
all_df <- merge(model_df, test_df, by = "Name")
write.table(all_df, "data/uncleaned-human-data.txt", sep = '\t')
#Converting Affymetrix data into ENSEMBL gene ids
all_df[,1] <- gsub('.*:',"", all_df[,1])
colnames(all_df)[1] <- "probe_id"
ensemblKey = toTable(hgu133aENSEMBL)
all_df <- merge(all_df, ensemblKey, by = "probe_id")
all_df$probe_id <- all_df$ensembl_id
all_df$ensembl_id <- NULL
colnames(all_df)[1] <- "Genes"
# Averaging out duplicated genes
df_new <- data.table(all_df)
df_new <- df_new[,list(ARS_3 = mean(ARS_3), ARS_4 = mean(ARS_4), ERS_1 = mean(ERS_1),
ERS_2 = mean(ERS_2), CBS_1 = mean(CBS_1), CBS_2 = mean(CBS_2),
ES_1 = mean(ES_1), ES_2 = mean(ES_2), ES_3 = mean(ES_3), FMT_1 = mean(FMT_1),
FMT_2 = mean(FMT_2), MSS_1 = mean(MSS_1), MSS_2 = mean(MSS_2), MSS_3 = mean(MSS_3),
MSS_4 = mean(MSS_4), LMS_1 = mean(LMS_1), LMS_2 = mean(LMS_2), LMS_3 = mean(LMS_3),
LMS_4 = mean(LMS_4), MLS_1 = mean(MLS_1), MLS_2 = mean(MLS_2), MLS_3 = mean(MLS_3),
MLS_4 = mean(MLS_4), OS_1 = mean(OS_1), OS_2 = mean(OS_2), OS_3 = mean(OS_3),
OS_4 = mean(OS_4), OS_5 = mean(OS_5), OS_6 = mean(OS_6), ARS_1 = mean(ARS_1),
ERS_3 = mean(ERS_3), CBS_3 = mean(CBS_3), CBS_4 = mean(CBS_4), ES_4 = mean(ES_4),
ES_5 = mean(ES_5), FMT_3 = mean(FMT_3), FMT_4 = mean(FMT_4), MSS_5 = mean(MSS_5),
MSS_6 = mean(MSS_6), MSS_7 = mean(MSS_7), MSS_8 = mean(MSS_8), LMS_5 = mean(LMS_5),
LMS_6 = mean(LMS_6), LMS_7 = mean(LMS_8), MLS_5 = mean(MLS_5), MLS_6 = mean(MLS_6),
MLS_7 = mean(MLS_7), OS_7 = mean(OS_7), OS_8 = mean(OS_8), OS_9 = mean(OS_9),
OS_10 = mean(OS_10), OS_11 = mean(OS_11)), list(Genes)]
all_df <- df_new
write.table(df, "human_gene_data.txt", sep = "\t")
h_df <- read.delim("data/human_gene_data.txt", row.names = NULL,  sep = "\t")
View(h_df)
head(all_df)
h_df <- read.delim("data/human_gene_data.txt", sep = "\t")
m_df <- read.delim("data/mouse_gene_data.txt", sep = "\t")
head(h_df)
head(m_df)
head(all_df)
write.table(all_df, "data/human_gene_data.txt", sep = "\t")
h_df <- read.delim("data/human_gene_data.txt", sep = "\t")
m_df <- read.delim("data/mouse_gene_data.txt", sep = "\t")
h_df <- h_df[h_df$Genes %in% m_df$Genes, ]
h_df <- read.delim("data/human_gene_data.txt", sep = "\t")
dim(h_df)
dim(m_df)
h_df <- h_df[h_df$Genes %in% m_df$Genes, ]
dim(h_df)
m_df <- m_df[m_df$Genes %in% h_df$Genes, ]
dim9m_df
dim(m_df)
View(m_df)
combined_df <- merge(h_df, m_df, by = "Genes")
head(combined_df)
write.table(combined_df, "data/combined_data.txt", sep = "\t")
dim(combined_df)
# Removing low variance features (i.e. all values are between 0.5 standard deviations)
row_sub = apply(combined_df, 1, function(row) all(var(row[2:61]) > 0))
combined_df <- combined_df[row_sub,]
write.table(combined_df, "data/combined_data.txt", sep = "\t")
dim(combined_df)
source('~/Documents/HYRS/mouse_project/script/MP.Library.R')
?legend
source('~/Documents/HYRS/E-MEXP-353/metagene_proj/script.R')
dist.matrix <- dist(t(m.ds))
HC <- hclust(dist.matrix, method="complete")
quartz(height = 20, width = 30)
nf <- layout(matrix(c(1, 2), 1, 2, byrow=T), widths = c(7, 1), respect = FALSE)
HC$labels <- class.list
dhc <- as.dendrogram(HC, hang = 0.05, edge.root = T, dLeaf = 4, edgePar = list(col = c("blue", "green"), lty = c(1, 1), lwd = c(2, 2), t.col = c(1, 1)))
local({
colLab <<- function(n) {
if(is.leaf(n)) {
a <- attributes(n)
i <<- i+1
attr(n, "nodePar") <-
#                    c(a$nodePar, list(lab.col = mycols[i], pch = c(21, 21), col = c(1, 1), bg = c(mycols[i], mycols[i]), cex = c(0.8, 0.8),
c(a$nodePar, list(lab.col = 0, pch = c(mysymbs[i], mysymbs[i]), col = c(1, 1), bg = c(mycols[i], mycols[i]), cex = c(1.5, 1.5),
lab.font= i%%1))
}
n
}
mycols <- col[class.labels[HC$order]]
mysymbs <- symbs[class.labels[HC$order]]
i <- 0
})
dL <- dendrapply(dhc, colLab)
plot(dL, cex=1, edge.root = T, main = " Hierarchical Clustering (original data)", xlab = "samples") ## --> colored labels!
leg.txt <- class.phen
n.phen <- length(class.phen)
p.vec <- symbs[1:n.phen]
c.vec <- col[1:n.phen]
par(mar = c(0, 0, 0, 0))
plot(c(0,0), c(1, 1), xlim = c(0, 1), ylim = c(0, 1), axes=F, type="n", xlab = "", ylab="")
legend(x=0, y=1, legend=leg.txt, bty="n", xjust=0, yjust= 1, pch = p.vec, pt.bg = c.vec, col = "black", cex = symbol.scaling*1.5, pt.cex=symbol.scaling*3, y.intersep = 2)
plot.filename <- paste(output.dir, identifier, ".htree", sep="")
jpeg(filename = plot.filename, type ="jpeg", device = dev.cur())
# Read projected dataset
input.ds <- paste(output.dir, identifier, ".all.H.gct", sep="")
input.cls <- paste(output.dir, identifier, ".all.H.cls", sep="")
dataset <- MP.Gct2Frame(filename = input.ds)
m.ds <- data.matrix(dataset$ds)
N.ds <- length(m.ds[,1])
M.ds <- length(m.ds[1,])
ds.names <- dataset$row.names
ds.descs <- dataset$descs
ds.sample.names <- dataset$names
# Compute hierarchical tree clustering
dist.matrix <- dist(t(m.ds))
HC <- hclust(dist.matrix, method="complete")
quartz(height = 20, width = 30)
nf <- layout(matrix(c(1, 2), 1, 2, byrow=T), widths = c(7, 1), respect = FALSE)
HC$labels <- class.list
dhc <- as.dendrogram(HC, hang = 0.05, edge.root = T, dLeaf = 4, edgePar = list(col = c("blue", "green"), lty = c(1, 1), lwd = c(2, 2), t.col = c(1, 1)))
local({
colLab <<- function(n) {
if(is.leaf(n)) {
a <- attributes(n)
i <<- i+1
attr(n, "nodePar") <-
#                    c(a$nodePar, list(lab.col = mycols[i], pch = c(21, 21), col = c(1, 1), bg = c(mycols[i], mycols[i]), cex = c(0.8, 0.8),
c(a$nodePar, list(lab.col = 0, pch = c(mysymbs[i], mysymbs[i]), col = c(1, 1), bg = c(mycols[i], mycols[i]), cex = c(1.5, 1.5),
lab.font= i%%1))
}
n
}
mycols <- col[class.labels[HC$order]]
mysymbs <- symbs[class.labels[HC$order]]
i <- 0
})
dL <- dendrapply(dhc, colLab)
plot(dL, cex=1, edge.root = T, main = " Hierarchical Clustering (projected data)", xlab = "samples") ## --> colored labels!
leg.txt <- class.phen
n.phen <- length(class.phen)
p.vec <- symbs[1:n.phen]
c.vec <- col[1:n.phen]
par(mar = c(0, 0, 0, 0))
plot(c(0,0), c(1, 1), xlim = c(0, 1), ylim = c(0, 1), axes=F, type="n", xlab = "", ylab="")
legend(x=0, y=1, legend=leg.txt, bty="n", xjust=0, yjust= 1, pch = p.vec, pt.bg = c.vec, col = "black", cex = symbol.scaling*1.35, pt.cex=symbol.scaling*3)
plot.filename <- paste(output.dir, identifier, ".H.htree", sep="")
jpeg(filename = plot.filename, type ="jpeg", device = dev.cur())
source('~/Documents/HYRS/E-MEXP-353/metagene_proj/MP.Library.R')
source('~/Documents/HYRS/E-MEXP-353/metagene_proj/script.R')
?legend
source('~/Documents/HYRS/E-MEXP-353/metagene_proj/script.R')
?jpeg
source('~/Documents/HYRS/E-MEXP-353/metagene_proj/script.R')
source('~/Documents/HYRS/E-MEXP-353/metagene_proj/script.R')
