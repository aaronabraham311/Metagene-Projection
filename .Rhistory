output.2D.proj.plot =         paste(output.dir, identifier, ".2D.proj", sep=""),
output.heatmap.plot =         paste(output.dir, identifier, ".heatmap", sep=""),
output.heatmap.sorted.plot =  paste(output.dir, identifier, ".heatmap.sorted", sep=""),
title =                       identifier,
seed =                        seed,
heatmap.row.norm =            heatmap.row.norm,
heatmap.cmap.type =           heatmap.cmap.type,
symbol.scaling =              symbol.scaling,
col =                         col,
symbs =                       symbs)
O <- MP.Evaluate.Projection(
input.ds =                    paste(output.dir, identifier, ".all.H.gct", sep=""),
input.cls =                   paste(output.dir, identifier, ".all.H.cls", sep=""),
model.set =                   seq(1, model.size),
prediction.results.file =     paste(output.dir, identifier, ".pred.txt", sep=""),
prediction.matrix.file =      paste(output.dir, identifier, ".pred.gct", sep=""),
col =                         col,
use.feature.names =           use.feature.names,
nchar.phen =                  nchar.phen,
high.conf.thres =             high.conf.thres,
symbol.scaling =              symbol.scaling,
symbs          =              symbs,
levels =                      levels,
nlevels =                     nlevels,
kernel =                      kernel,
cost =                        cost,
gamma =                       gamma)
m.train <- m[,model.set]
dataset <- MP.Gct2Frame(filename = input.ds)
source('~/Documents/HYRS/mouse_project/script.R')
source('~/Documents/HYRS/mouse_project/script.R')
O <- MP.Projection.Plots(
input.ds =                    paste(output.dir, identifier, ".all.H.gct", sep=""),
input.cls =                   paste(output.dir, identifier, ".all.H.cls", sep=""),
model.set =                   seq(1, model.size),
output.2D.proj.plot =         paste(output.dir, identifier, ".2D.proj", sep=""),
output.heatmap.plot =         paste(output.dir, identifier, ".heatmap", sep=""),
output.heatmap.sorted.plot =  paste(output.dir, identifier, ".heatmap.sorted", sep=""),
title =                       identifier,
seed =                        seed,
heatmap.row.norm =            heatmap.row.norm,
heatmap.cmap.type =           heatmap.cmap.type,
symbol.scaling =              symbol.scaling,
col =                         col,
symbs =                       symbs)
CLS <- MP.ReadClsFile(file =  paste(output.dir, identifier, ".model_set.2.cls", sep=""))
model.size <- length(CLS$class.v)
input.ds =                    paste(output.dir, identifier, ".all.H.gct", sep="")
input.cls =                   paste(output.dir, identifier, ".all.H.cls", sep="")
model.set =                   seq(1, model.size)
View(MP.Projection.Plots)
dataset <- MP.Gct2Frame(filename = input.ds)
m <- data.matrix(dataset$ds)
gs.names <- dataset$row.names
gs.descs <- dataset$descs
sample.names <- dataset$names
plot.filename <- paste(output.2D.proj.plot, ".pdf", sep="", collapse="")
dataset <- MP.Gct2Frame(filename = input.ds)
m <- data.matrix(dataset$ds)
gs.names <- dataset$row.names
gs.descs <- dataset$descs
sample.names <- dataset$names
Ns <- length(m[1,])
k.proj <- length(m[,1])
if (input.cls != "") {
CLS <- MP.ReadClsFile(file=input.cls)
class.labels <- CLS$class.v
class.phen <- CLS$phen
} else {
class.labels <- rep(1, Ns)
class.phen <- "Samples"
}
if (model.set == "ALL") {
model.set <- seq(1, Ns)
}
m.train <- as.matrix(m[, model.set])
num.samples.train <- length(model.set)
sample.names.train <- sample.names[model.set]
if (input.cls != "") {
class.labels.train <- class.labels[model.set]
}
m.test <- as.matrix(m[, - model.set])
sample.names.test <- sample.names[- model.set]
if (input.cls != "") {
class.labels.test <- class.labels[- model.set]
}
pca <- prcomp(t(m.train), retx = TRUE, center = TRUE, scale. = TRUE)
S1 <- pca$x[,1]
S2 <- pca$x[,2]
X1 <- pca$rotation[,1]
X2 <- pca$rotation[,2]
pc
pca
max.S <- max(sqrt(S1*S1 + S2*S2))
max.X <- max(sqrt(X1*X1 + X2*X2))
X1 <-  max.S * X1/max.X
X2 <-  max.S * X2/max.X
max.A <- max(max.S, max.X)
c0 <- col
c1 <- col
#   c1 <- colors()[match(c0, colors())]
color <- c1[class.labels]
if (.Platform$OS.type == "windows") {
plot.filename <- output.2D.proj.plot
windows(height = 20, width = 30)
}
nf <- layout(matrix(c(1, 2, 3), 1, 3, byrow=T), widths = c(3, 3, 1), heights = 1, respect = FALSE)
plot(S1, S2, xlim = c(-max.A, max.A), ylim = c(-max.A, max.A), type = "n", main = paste(title, " -- Model Samples Biplot", sep=""), sub = input.ds)
for (j in 1:num.samples.train) {
if (min(class.labels) == 0) {
color.code <- c1[class.labels[j] + 1]
symb <- symbs[class.labels[j] + 1]
} else {
color.code <- c1[class.labels[j]]
symb <- symbs[class.labels[j]]
}
points(S1[j], S2[j], pch=symb, type="p", cex = symbol.scaling*3, bg = color.code, col = "black")
}
for (j in 1:k.proj) {
x.coor <- X1[j]*0.925
y.coor <- X2[j]*0.925
arrows(0, 0, x.coor, y.coor, lwd = 1, length = 0.15, angle = 20, col = "black")
leg.txt <- paste("F", j, sep = "")
text(X1[j], X2[j], labels = leg.txt, adj = NULL, pos = NULL, offset = 0.5, vfont = NULL, cex = symbol.scaling*2, col = "black")
}
ang <- vector(length = k.proj, mode = "numeric")
for (j in 1:k.proj) {
ang[j] <- ifelse(atan2(X2[j], X1[j]) > 0,  atan2(X2[j], X1[j]), 2*pi + atan2(X2[j], X1[j]))
}
ang.index <- order(ang, decreasing=F)
ang2 <- ang[ang.index]
for (j in 1:k.proj) {
if (j == k.proj) {
angle.in.between <- (ang2[1] - ang2[j] - 2*pi)/2 + ang2[j] - 2*pi
} else {
angle.in.between <- (ang2[j + 1] - ang2[j])/2 + ang2[j]
}
x <- max.S * cos(angle.in.between)
y <- max.S * sin(angle.in.between)
arrows(0, 0, x, y, lwd = 4, length = 0, lty = 3, col = "grey50")
}
test.scores <- predict(pca, t(m.test))
S1 <- c(pca$x[,1], test.scores[,1])
S2 <- c(pca$x[,2], test.scores[,2])
max.S <- max(sqrt(S1*S1 + S2*S2))
max.X <- max(sqrt(X1*X1 + X2*X2))
X1 <-  max.S * X1/max.X
X2 <-  max.S * X2/max.X
num.samples <- length(S1)
plot(S1, S2, xlim = c(-max.A, max.A), ylim = c(-max.A, max.A), type = "n", main = paste(title, " -- Model + Test Samples Biplot", sep=""), sub = input.ds)
for (j in 1:num.samples) {
if (min(class.labels) == 0) {
symb <- symbs[class.labels[j] + 1]
color.code <- c1[class.labels[j] + 1]
} else {
symb <- symbs[class.labels[j]]
color.code <- c1[class.labels[j]]
}
points(S1[j], S2[j], pch=symb, type="p", cex = symbol.scaling*3, bg = color.code, col = "black")
}
input.ds =                    paste(output.dir, identifier, ".all.H.gct", sep=""
)
input.cls =                   paste(output.dir, identifier, ".all.H.cls", sep="")
model.set =                   seq(1, model.size)
View(MP.Evaluate.Projection)
dataset <- MP.Gct2Frame(filename = input.ds)
m <- data.matrix(dataset$ds)
max.m <- max(m)
m <- m/max.m
gs.names <- dataset$row.names
gs.descs <- dataset$descs
sample.names <- dataset$names
dim(m)
Ns <- length(m[1,])
N <- length(m[,1])
CLS <- MP.ReadClsFile(file=input.cls)
class.labels <- CLS$class.v
class.list <- CLS$class.list
class.phen <- CLS$phen
class.list
num.classes <- length(class.phen)
Ns <- length(m[1,])
N <- length(m[,1])
CLS <- MP.ReadClsFile(file=input.cls)
class.labels <- CLS$class.v
class.list <- CLS$class.list
class.phen <- CLS$phen
num.classes <- length(class.phen)
print("Reading dataset completed...")
# Use first nchar.phen characters of phenotype class to define new phenotypes
class.list2 <- vector(length = Ns, mode = "character")
for (i in 1:Ns) {
class.list2[i] <- substr(class.list[i], 1, nchar.phen)
}
class.phen2 <- vector(length = num.classes, mode = "character")
for (i in 1:num.classes) {
class.phen2[i] <- substr(class.phen[i], 1, nchar.phen)
}
true.num.classes <- length(table(class.phen2))
class.labels2 <- match(class.list2, class.phen2)
# Separate data into train and test pieces
m.train <- m[,model.set]
n.train <- length(model.set)
num.samples.train <- n.train
sample.names.train <- as.factor(sample.names[model.set])
class.list.train <- class.list2[model.set]
class.phen.train <- unique(class.list.train)
class.labels.train <- class.labels2[model.set]
orig.class.labels.train <- class.labels[model.set]
if (Ns - length(model.set) > 0) {
m.test <- as.matrix(m[, - model.set])
n.test <- length(m.test[1,])
sample.names.test <- as.factor(sample.names[- model.set])
class.list.test <- class.list2[- model.set]
class.phen.test <- unique(class.list.test)
class.labels.test <- class.labels2[- model.set]
}
one.over <- function(x) { return(100/length(x)) }
class.number.list <- split(rep(1, length(class.list.train)) , class.list.train)
class.weights  <- sapply(class.number.list, one.over)
print(c("class.weights=", class.weights))
t(m.train)
View(t(m))
class.list2 <- vector(length = Ns, mode = "character")
class.list2
for (i in 1:Ns) {
class.list2[i] <- substr(class.list[i], 1, nchar.phen)
}
class.list2
class.phen2 <- vector(length = num.classes, mode = "character")
for (i in 1:num.classes) {
class.phen2[i] <- substr(class.phen[i], 1, nchar.phen)
}
class.phen2
true.num.classes <- length(table(class.phen2))
class.labels2 <- match(class.list2, class.phen2)
class.labels2
m.train <- m[,model.set]
m.train
n.train <- length(model.set)
source('~/Documents/HYRS/mouse_project/MP.Library.R')
source('~/Documents/HYRS/mouse_project/script.R')
source('~/Documents/HYRS/mouse_project/script.R')
source('~/Documents/HYRS/mouse_project/script.R')
# Compute hierarchical clustering
input.ds <- paste(output.dir, identifier, ".all.gct", sep="")
input.cls <- paste(output.dir, identifier, ".all.cls", sep="")
dataset <- MP.Gct2Frame(filename = input.ds)
m.ds <- data.matrix(dataset$ds)
N.ds <- length(m.ds[,1])
M.ds <- length(m.ds[1,])
ds.names <- dataset$row.names
ds.descs <- dataset$descs
ds.sample.names <- dataset$names
# Read class labels
CLS <- MP.ReadClsFile(file=input.cls)
class.labels <- CLS$class.v
class.phen <- CLS$phen
class.list <- CLS$class.list
class.labels <- match(class.list, class.phen)
# Compute hierarchical tree clustering
dist.matrix <- dist(t(m.ds))
HC <- hclust(dist.matrix, method="complete")
quartz(height = 20, width = 30)
nf <- layout(matrix(c(1, 2), 1, 2, byrow=T), widths = c(7, 1), respect = FALSE)
HC$labels <- class.list
dhc <- as.dendrogram(HC, hang = 0.05, edge.root = T, dLeaf = 4, edgePar = list(col = c("blue", "green"), lty = c(1, 1), lwd = c(2, 2), t.col = c(1, 1)))
local({
colLab <<- function(n) {
if(is.leaf(n)) {
a <- attributes(n)
i <<- i+1
attr(n, "nodePar") <-
#                    c(a$nodePar, list(lab.col = mycols[i], pch = c(21, 21), col = c(1, 1), bg = c(mycols[i], mycols[i]), cex = c(0.8, 0.8),
c(a$nodePar, list(lab.col = 0, pch = c(mysymbs[i], mysymbs[i]), col = c(1, 1), bg = c(mycols[i], mycols[i]), cex = c(1.5, 1.5),
lab.font= i%%1))
}
n
}
mycols <- col[class.labels[HC$order]]
mysymbs <- symbs[class.labels[HC$order]]
i <- 0
})
dL <- dendrapply(dhc, colLab)
plot(dL, cex=1, edge.root = T, main = " Hierarchical Clustering (original data)", xlab = "samples") ## --> colored labels!
leg.txt <- class.phen
n.phen <- length(class.phen)
p.vec <- symbs[1:n.phen]
c.vec <- col[1:n.phen]
par(mar = c(0, 0, 0, 0))
plot(c(0,0), c(1, 1), xlim = c(0, 1), ylim = c(0, 1), axes=F, type="n", xlab = "", ylab="")
legend(x=0, y=1, legend=leg.txt, bty="n", xjust=0, yjust= 1, pch = p.vec, pt.bg = c.vec, col = "black", cex = symbol.scaling*1.35, pt.cex=symbol.scaling*3)
plot.filename <- paste(output.dir, identifier, ".htree", sep="")
jpeg(filename = plot.filename, type ="jpeg", device = dev.cur())
# Read projected dataset
input.ds <- paste(output.dir, identifier, ".all.H.gct", sep="")
input.cls <- paste(output.dir, identifier, ".all.H.cls", sep="")
dataset <- MP.Gct2Frame(filename = input.ds)
m.ds <- data.matrix(dataset$ds)
N.ds <- length(m.ds[,1])
M.ds <- length(m.ds[1,])
ds.names <- dataset$row.names
ds.descs <- dataset$descs
ds.sample.names <- dataset$names
# Compute hierarchical tree clustering
dist.matrix <- dist(t(m.ds))
HC <- hclust(dist.matrix, method="complete")
quartz(height = 20, width = 30)
nf <- layout(matrix(c(1, 2), 1, 2, byrow=T), widths = c(7, 1), respect = FALSE)
HC$labels <- class.list
dhc <- as.dendrogram(HC, hang = 0.05, edge.root = T, dLeaf = 4, edgePar = list(col = c("blue", "green"), lty = c(1, 1), lwd = c(2, 2), t.col = c(1, 1)))
local({
colLab <<- function(n) {
if(is.leaf(n)) {
a <- attributes(n)
i <<- i+1
attr(n, "nodePar") <-
#                    c(a$nodePar, list(lab.col = mycols[i], pch = c(21, 21), col = c(1, 1), bg = c(mycols[i], mycols[i]), cex = c(0.8, 0.8),
c(a$nodePar, list(lab.col = 0, pch = c(mysymbs[i], mysymbs[i]), col = c(1, 1), bg = c(mycols[i], mycols[i]), cex = c(1.5, 1.5),
lab.font= i%%1))
}
n
}
mycols <- col[class.labels[HC$order]]
mysymbs <- symbs[class.labels[HC$order]]
i <- 0
})
dL <- dendrapply(dhc, colLab)
plot(dL, cex=1, edge.root = T, main = " Hierarchical Clustering (projected data)", xlab = "samples") ## --> colored labels!
leg.txt <- class.phen
n.phen <- length(class.phen)
p.vec <- symbs[1:n.phen]
c.vec <- col[1:n.phen]
par(mar = c(0, 0, 0, 0))
plot(c(0,0), c(1, 1), xlim = c(0, 1), ylim = c(0, 1), axes=F, type="n", xlab = "", ylab="")
legend(x=0, y=1, legend=leg.txt, bty="n", xjust=0, yjust= 1, pch = p.vec, pt.bg = c.vec, col = "black", cex = symbol.scaling*1.35, pt.cex=symbol.scaling*3)
plot.filename <- paste(output.dir, identifier, ".H.htree", sep="")
jpeg(filename = plot.filename, type ="jpeg", device = dev.cur())
# Compute class membership
membership <- vector(length=M.ds, mode="numeric")
for (j in 1:M.ds) { # Find membership
membership[j] <- order(m.ds[,j], decreasing=T)
}
mem.order <- order(membership, decreasing=F)
membership.sorted <- membership[mem.order]
ds.sample.names <- paste(class.list, ds.sample.names, sep="_")
ds.sample.names.sorted <- ds.sample.names[mem.order]
class.list.sorted <- class.list[mem.order]
mem.table <- data.frame(cbind(class.list, ds.sample.names, membership, rep(" ", M.ds), class.list.sorted, ds.sample.names.sorted, membership.sorted))
row.names(mem.table) <- seq(1, M.ds)
names(mem.table) <- c("Phen", "Sample Names", "Membership", " ", "Phen Sorted", "Sample Names Sorted", "Membership Sorted")
mem.filename <- paste(output.dir, identifier, ".H.mem.txt", sep="")
write.table(file = mem.filename, mem.table, quote=F, sep="\t")
table(class.list.sorted, membership.sorted)
}
source('~/Documents/HYRS/mouse_project/script.R')
input.ds <- paste(output.dir, identifier, ".all.gct", sep="")
input.cls <- paste(output.dir, identifier, ".all.cls", sep="")
dataset <- MP.Gct2Frame(filename = input.ds)
m.ds <- data.matrix(dataset$ds)
N.ds <- length(m.ds[,1])
M.ds <- length(m.ds[1,])
ds.names <- dataset$row.names
ds.descs <- dataset$descs
ds.sample.names <- dataset$names
# Read class labels
CLS <- MP.ReadClsFile(file=input.cls)
class.labels <- CLS$class.v
class.phen <- CLS$phen
class.list <- CLS$class.list
class.labels <- match(class.list, class.phen)
# Compute hierarchical tree clustering
dist.matrix <- dist(t(m.ds))
HC <- hclust(dist.matrix, method="complete")
quartz(height = 20, width = 30)
nf <- layout(matrix(c(1, 2), 1, 2, byrow=T), widths = c(7, 1), respect = FALSE)
HC$labels <- class.list
dhc <- as.dendrogram(HC, hang = 0.05, edge.root = T, dLeaf = 4, edgePar = list(col = c("blue", "green"), lty = c(1, 1), lwd = c(2, 2), t.col = c(1, 1)))
local({
colLab <<- function(n) {
if(is.leaf(n)) {
a <- attributes(n)
i <<- i+1
attr(n, "nodePar") <-
#                    c(a$nodePar, list(lab.col = mycols[i], pch = c(21, 21), col = c(1, 1), bg = c(mycols[i], mycols[i]), cex = c(0.8, 0.8),
c(a$nodePar, list(lab.col = 0, pch = c(mysymbs[i], mysymbs[i]), col = c(1, 1), bg = c(mycols[i], mycols[i]), cex = c(1.5, 1.5),
lab.font= i%%1))
}
n
}
mycols <- col[class.labels[HC$order]]
mysymbs <- symbs[class.labels[HC$order]]
i <- 0
})
dL <- dendrapply(dhc, colLab)
plot(dL, cex=1, edge.root = T, main = " Hierarchical Clustering (original data)", xlab = "samples") ## --> colored labels!
leg.txt <- class.phen
n.phen <- length(class.phen)
p.vec <- symbs[1:n.phen]
c.vec <- col[1:n.phen]
par(mar = c(0, 0, 0, 0))
plot(c(0,0), c(1, 1), xlim = c(0, 1), ylim = c(0, 1), axes=F, type="n", xlab = "", ylab="")
legend(x=0, y=1, legend=leg.txt, bty="n", xjust=0, yjust= 1, pch = p.vec, pt.bg = c.vec, col = "black", cex = symbol.scaling*1.35, pt.cex=symbol.scaling*3)
plot.filename <- paste(output.dir, identifier, ".htree", sep="")
jpeg(filename = plot.filename, type ="jpeg", device = dev.cur())
# Read projected dataset
input.ds <- paste(output.dir, identifier, ".all.H.gct", sep="")
input.cls <- paste(output.dir, identifier, ".all.H.cls", sep="")
dataset <- MP.Gct2Frame(filename = input.ds)
m.ds <- data.matrix(dataset$ds)
N.ds <- length(m.ds[,1])
M.ds <- length(m.ds[1,])
ds.names <- dataset$row.names
ds.descs <- dataset$descs
ds.sample.names <- dataset$names
# Compute hierarchical tree clustering
dist.matrix <- dist(t(m.ds))
HC <- hclust(dist.matrix, method="complete")
quartz(height = 20, width = 30)
nf <- layout(matrix(c(1, 2), 1, 2, byrow=T), widths = c(7, 1), respect = FALSE)
HC$labels <- class.list
dhc <- as.dendrogram(HC, hang = 0.05, edge.root = T, dLeaf = 4, edgePar = list(col = c("blue", "green"), lty = c(1, 1), lwd = c(2, 2), t.col = c(1, 1)))
local({
colLab <<- function(n) {
if(is.leaf(n)) {
a <- attributes(n)
i <<- i+1
attr(n, "nodePar") <-
#                    c(a$nodePar, list(lab.col = mycols[i], pch = c(21, 21), col = c(1, 1), bg = c(mycols[i], mycols[i]), cex = c(0.8, 0.8),
c(a$nodePar, list(lab.col = 0, pch = c(mysymbs[i], mysymbs[i]), col = c(1, 1), bg = c(mycols[i], mycols[i]), cex = c(1.5, 1.5),
lab.font= i%%1))
}
n
}
mycols <- col[class.labels[HC$order]]
mysymbs <- symbs[class.labels[HC$order]]
i <- 0
})
dL <- dendrapply(dhc, colLab)
plot(dL, cex=1, edge.root = T, main = " Hierarchical Clustering (projected data)", xlab = "samples") ## --> colored labels!
leg.txt <- class.phen
n.phen <- length(class.phen)
p.vec <- symbs[1:n.phen]
c.vec <- col[1:n.phen]
par(mar = c(0, 0, 0, 0))
plot(c(0,0), c(1, 1), xlim = c(0, 1), ylim = c(0, 1), axes=F, type="n", xlab = "", ylab="")
legend(x=0, y=1, legend=leg.txt, bty="n", xjust=0, yjust= 1, pch = p.vec, pt.bg = c.vec, col = "black", cex = symbol.scaling*1.35, pt.cex=symbol.scaling*3)
plot.filename <- paste(output.dir, identifier, ".H.htree", sep="")
jpeg(filename = plot.filename, type ="jpeg", device = dev.cur())
# Compute class membership
membership <- vector(length=M.ds, mode="numeric")
for (j in 1:M.ds) { # Find membership
membership[j] <- order(m.ds[,j], decreasing=T)
}
mem.order <- order(membership, decreasing=F)
membership.sorted <- membership[mem.order]
ds.sample.names <- paste(class.list, ds.sample.names, sep="_")
ds.sample.names.sorted <- ds.sample.names[mem.order]
class.list.sorted <- class.list[mem.order]
mem.table <- data.frame(cbind(class.list, ds.sample.names, membership, rep(" ", M.ds), class.list.sorted, ds.sample.names.sorted, membership.sorted))
row.names(mem.table) <- seq(1, M.ds)
names(mem.table) <- c("Phen", "Sample Names", "Membership", " ", "Phen Sorted", "Sample Names Sorted", "Membership Sorted")
mem.filename <- paste(output.dir, identifier, ".H.mem.txt", sep="")
write.table(file = mem.filename, mem.table, quote=F, sep="\t")
table(class.list.sorted, membership.sorted)
plot(dL, cex=1, edge.root = T, main = " Hierarchical Clustering (projected data)", xlab = "samples") ## --> colored labels!
dL
plot(dL, cex=1, edge.root = T, main = " Hierarchical Clustering (projected data)", xlab = "samples") ## --> colored labels!
?pdf
pdf(file = plot.filename)
plot(dL, cex=1, edge.root = T, main = " Hierarchical Clustering (projected data)", xlab = "samples") ## --> colored labels!
dev.off()
jpeg(filename = plot.filename, type ="jpeg", device = dev.cur())
?jpeg
jpeg(filename = plot.filename, type ="quartz", device = dev.cur())
jpeg(filename = plot.filename, type ="quartz")
plot.filename
df <- read.delim("model_data.txt", sep = "\t", row.names = 1)
?read.delim
df <- read.delim("model_data.txt",row.name = 1, sep = "\t", row.names = 1)
df <- read.delim("model_data.txt", row.name = 1, sep = "\t", row.names = 1)
df <- read.delim("model_data.txt", row.names = 1, sep = "\t", row.names = 1)
df <- read.delim("model_data.txt", sep = "\t", row.names = 1)
df <- read.delim("model_data.txt", sep = "\t", row.names = 1)
head(df)
d <- dist(df[,2:9])
head(df[,2:9])
library(hclust)
?hclust
plot(clusters)
clusters <- hclust(d)
plot(clusters)
plot(clusters)
plot(clusters)
source('~/Documents/HYRS/mouse_project/MP.Library.R')
View(MP.Subset.Dataset)
df <- read.delim("model_data.txt", sep = "\t", row.names = 1)
df <- df[, 2: 9]
View(df)
source('~/Documents/HYRS/mouse_project/script.R')
source('~/Documents/HYRS/mouse_project/script.R')
source('~/Documents/HYRS/mouse_project/script.R')
source('~/Documents/HYRS/mouse_project/script.R')
jpeg(filename = plot.filename, type ="jpeg", device = dev.cur())
plot.filename <- paste(output.dir, identifier, ".H.htree", sep="")
jpeg(filename = plot.filename, type ="jpeg", device = dev.cur())
jpeg(filename = plot.filename, type ="quarts", device = dev.cur())
jpeg(filename = plot.filename, type ="quartz", device = dev.cur())
jpeg(filename = plot.filename, type ="quartz")
source('~/Documents/HYRS/mouse_project/script.R')
source('~/Documents/HYRS/mouse_project/MP.Library.R')
source('~/Documents/HYRS/mouse_project/script.R')
